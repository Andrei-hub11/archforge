using System.Text.RegularExpressions;
using __ProjectName__.Domain.Exceptions;

namespace __ProjectName__.Domain.ValueObjects;

public class Email
{
    public string Value { get; }

    private Email(string value)
    {
        Value = value;
    }

    public static Email Create(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            throw new DomainException("Email cannot be empty");
        }

        email = email.Trim();

        if (email.Length > 254)
        {
            throw new DomainException("Email is too long");
        }

        if (!IsValidEmail(email))
        {
            throw new DomainException("Email is invalid");
        }

        return new Email(email);
    }

    private static bool IsValidEmail(string email)
    {
        var regex = new Regex(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$");
        return regex.IsMatch(email);
    }

    public override string ToString() => Value;

    public override bool Equals(object? obj)
    {
        if (obj is Email email)
        {
            return Value.Equals(email.Value, StringComparison.OrdinalIgnoreCase);
        }
        return false;
    }

    public override int GetHashCode()
    {
        return Value.ToLowerInvariant().GetHashCode();
    }
}