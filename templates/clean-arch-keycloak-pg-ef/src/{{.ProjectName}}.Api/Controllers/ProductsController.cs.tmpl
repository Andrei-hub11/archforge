using Microsoft.AspNetCore.Mvc;
using __ProjectName__.Contracts.Request;
using __ProjectName__.Contracts.Response;
using __ProjectName__.Application.Contracts.Interfaces;

namespace __ProjectName__.Api.Controllers;


[ApiController]
[Route("api/[controller]")]
public class ProductsController : ControllerBase
{
    private readonly IProductService _productService;

    public ProductsController(IProductService productService)
    {
        _productService = productService;
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<ProductResponse>>> GetAll()
    {
        var products = await _productService.GetAllAsync();
        return Ok(products);
    }

    [HttpGet("active")]
    public async Task<ActionResult<IEnumerable<ProductResponse>>> GetActive()
    {
        var products = await _productService.GetActiveAsync();
        return Ok(products);
    }

    [HttpGet("{id:guid}")]
    public async Task<ActionResult<ProductResponse>> GetById(Guid id)
    {
        var product = await _productService.GetByIdAsync(id);

        if (product == null)
            return NotFound();

        return Ok(product);
    }

    [HttpPost]
    public async Task<ActionResult<ProductResponse>> Create([FromBody] CreateProductRequest request)
    {
        var product = await _productService.CreateAsync(request);
        return CreatedAtAction(nameof(GetById), new { id = product.Id }, product);
    }

    [HttpPut("{id:guid}")]
    public async Task<ActionResult<ProductResponse>> Update(Guid id, [FromBody] UpdateProductRequest request)
    {
        var product = await _productService.UpdateAsync(id, request);

        if (product == null)
            return NotFound();

        return Ok(product);
    }

    [HttpDelete("{id:guid}")]
    public async Task<ActionResult> Delete(Guid id)
    {
        var result = await _productService.DeleteAsync(id);

        if (!result)
            return NotFound();

        return NoContent();
    }

    [HttpPatch("{id:guid}/activate")]
    public async Task<ActionResult<ProductResponse>> Activate(Guid id)
    {
        var product = await _productService.ActivateAsync(id);

        if (product == null)
            return NotFound();

        return Ok(product);
    }

    [HttpPatch("{id:guid}/deactivate")]
    public async Task<ActionResult<ProductResponse>> Deactivate(Guid id)
    {
        var product = await _productService.DeactivateAsync(id);

        if (product == null)
            return NotFound();

        return Ok(product);
    }
}