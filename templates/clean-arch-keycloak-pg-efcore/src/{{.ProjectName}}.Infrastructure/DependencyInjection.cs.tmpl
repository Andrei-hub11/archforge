using __ProjectName__.Domain.Repositories;
using __ProjectName__.Infrastructure.Persistence;
using __ProjectName__.Infrastructure.Repositories;
using __ProjectName__.Infrastructure.Security;
using __ProjectName__.Infrastructure.Persistence.Migrations;

using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;

namespace __ProjectName__.Infrastructure;

public static class DependencyInjection
{
    public static IServiceCollection AddInfrastructure(this IServiceCollection services, IConfiguration configuration)
    {
        services.AddDbContext<ApplicationDbContext>(options =>
            options.UseNpgsql(
                configuration.GetConnectionString("DefaultConnection")
                ?? throw new InvalidOperationException("Connection string not found"),
                b => b.MigrationsAssembly(typeof(ApplicationDbContext).Assembly.FullName)));

        services.AddScoped<IProductRepository, ProductRepository>();

        services.AddKeycloakAuthentication(configuration);

        services.AddRepositories();

        return services;
    }


    // Initializes the application's database by applying pending EF Core migrations.
    // 
    // Before running the application for the first time, you must generate the initial migration and apply it to the database.
    //
    // Generate initial migration:
    // dotnet ef migrations add InitialCreate --project YourApp.Infrastructure --startup-project YourApp.Api
    //
    // Apply the migration to create/update the database schema:
    // dotnet ef database update --project YourApp.Infrastructure --startup-project YourApp.Api
    //
    // This method triggers the database initialization logic, typically called at application startup.
    public static async Task InitializeDatabaseAsync(this IServiceProvider serviceProvider)
    {
        await ApplicationDbInitializer.InitializeDatabaseAsync(serviceProvider);
    }

    private static IServiceCollection AddRepositories(this IServiceCollection services)
    {
        services.AddScoped<IProductRepository, ProductRepository>();

        return services;
    }

    private static IServiceCollection AddKeycloakAuthentication(
    this IServiceCollection services,
    IConfiguration configuration
)
    {
        services.Configure<JwtSettings>(configuration.GetSection("Keycloak"));

        services.AddSingleton<
            IConfigureOptions<JwtBearerOptions>,
            KeycloakTokenValidationConfiguration
        >();

        services
            .AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer();

        return services;
    }
}