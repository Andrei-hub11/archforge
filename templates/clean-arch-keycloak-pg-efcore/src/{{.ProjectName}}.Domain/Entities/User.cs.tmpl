using __ProjectName__.Domain.Exceptions;
using __ProjectName__.Domain.ValueObjects;

namespace __ProjectName__.Domain.Entities;

public class User
{
    public Guid Id { get; private set; }
    public string KeycloakId { get; private set; }
    public string UserName { get; private set; }
    public Email Email { get; private set; }
    public DateTime CreatedAt { get; private set; }
    public DateTime? UpdatedAt { get; private set; }

    private User(Guid id, string keycloakId, string userName, Email email)
    {
        Id = id;
        KeycloakId = keycloakId;
        UserName = userName;
        Email = email;
        CreatedAt = DateTime.UtcNow;
    }

    // Factory method for creating a new User
    public static User Create(string keycloakId, string userName, string email, string profileImagePath)
    {
        if (string.IsNullOrWhiteSpace(keycloakId))
        {
            throw new DomainException("KeycloakId cannot be empty");
        }

        if (string.IsNullOrWhiteSpace(userName))
        {
            throw new DomainException("UserName cannot be empty");
        }

        if (userName.Length > 50)
        {
            throw new DomainException("UserName cannot exceed 50 characters");
        }

        return new User(
            Guid.NewGuid(),
            keycloakId,
            userName,
            Email.Create(email)
        );
    }

    // Update user info
    public void UpdateProfile(string userName, string email, string profileImagePath)
    {
        if (string.IsNullOrWhiteSpace(userName))
        {
            throw new DomainException("UserName cannot be empty");
        }

        if (userName.Length > 50)
        {
            throw new DomainException("UserName cannot exceed 50 characters");
        }

        UserName = userName;
        Email = Email.Create(email);
        UpdatedAt = DateTime.UtcNow;
    }

    // Update only email
    public void UpdateEmail(string email)
    {
        Email = Email.Create(email);
        UpdatedAt = DateTime.UtcNow;
    }
}